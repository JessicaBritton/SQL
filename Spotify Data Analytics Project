/*For this project, I downloaded Spotify data on the top 50 songs in 2021 from Kaggle.
I created a table in SQLite Studio to insert the Spotify data into.
Then I inserted the Spotify Data .csv into the table.
I explored the data and used SQL to answer some questions I had.
At the bottom is also a description of the 14 variables about the songs.*/

--Here is the table:

#Creating the table:

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

--Below are the questions, with the SQL used to get the results I was looking for:

-- 1. Who are all the artists?
SELECT
    ARTIST_NAME
FROM
    BIT_DB.SPOTIFYDATA
GROUP BY
    ARTIST_NAME;
    
-- 2. Who has the most songs in this top 50 and how many do they have? 
SELECT
    ARTIST_NAME,
    COUNT(ARTIST_NAME) AS NUMBER_OF_SONGS
FROM
    BIT_DB.SPOTIFYDATA
GROUP BY 
    ARTIST_NAME
HAVING
    COUNT(ARTIST_NAME) = 
    (SELECT 
        MAX(SONG_COUNT) 
    FROM (
        SELECT 
            ARTIST_NAME, 
            COUNT(ARTIST_NAME) AS SONG_COUNT 
        FROM 
            BIT_DB.SPOTIFYDATA 
        GROUP BY 
            ARTIST_NAME));

-- OR AS A CTE:
    
WITH
    COUNT_ARTIST AS (
    SELECT 
        ARTIST_NAME, 
        COUNT(ARTIST_NAME) AS SONG_COUNT 
    FROM 
        SPOTIFYDATA
    GROUP BY 
        ARTIST_NAME
    ),
   
MAX_COUNT AS (
   SELECT
       MAX(SONG_COUNT) AS MAX_SONGS
   FROM
       COUNT_ARTIST
   )

SELECT
    CA.ARTIST_NAME,
    CA.SONG_COUNT
FROM
    COUNT_ARTIST AS CA
JOIN
    MAX_COUNT AS MC
    ON CA.SONG_COUNT = MC.MAX_SONGS;

-- 3.. What are the names of Olivia Rodrigo's songs?
SELECT
    TRACK_NAME AS OLIVIA_RODRIGO_SONGS
FROM
    BIT_DB.SPOTIFYDATA
WHERE
    ARTIST_NAME = 'Olivia Rodrigo';

-- 4. What are the names of Doja Cat's songs?
SELECT
    TRACK_NAME AS DOJA_CAT_SONGS
FROM
    BIT_DB.SPOTIFYDATA
WHERE
    ARTIST_NAME = 'Doja Cat';

-- 5. What is the AVG Popularity?
SELECT
    AVG(POPULARITY) AS AVERAGE_POPULARITY
FROM
    BIT_DB.SPOTIFYDATA;

-- 6. How many songs have a high, average, below average, and low popularity within this top 50?
SELECT
    COUNT(*) AS NUMBER_OF_SONGS,
    CASE
        WHEN POPULARITY >= 90 THEN 'Highly Popular'
        WHEN POPULARITY >= 80 THEN 'Average Popularity'
        WHEN POPULARITY >= 70 THEN 'Below Average Popularity'
        ELSE 'Low Popularity'
    END AS 'Popularity Rating'
FROM
    BIT_DB.SPOTIFYDATA
GROUP BY
    "Popularity Rating"
ORDER BY 
    COUNT(*) DESC;

-- 7. Who are the top 10 artists by popularity?
SELECT
    ARTIST_NAME AS ARTIST,
    TRACK_NAME AS TRACK,
    POPULARITY
FROM
    BIT_DB.SPOTIFYDATA
ORDER BY   
    POPULARITY DESC
LIMIT 10;

-- 8. Is there a relaionship between popularity and song key? energy? tempo? speechiness? instrumentalness?
SELECT
    ARTIST_NAME,
    TRACK_NAME,
    POPULARITY,
    SONG_KEY,
    ENERGY,
    TEMPO,
    SPEECHINESS,
    INSTRUMENTALNESS
FROM
    BIT_DB.SPOTIFYDATA
ORDER BY
    POPULARITY DESC
LIMIT 10;

-- 9. What's the average danceability for the 10 most popular songs?
SELECT
    AVG(DANCEABILITY) AS AVG_DANCEABILITY_FOR_TOP_10_TRACKS
FROM (
    SELECT
        DANCEABILITY
    FROM
        SPOTIFYDATA
    ORDER BY
        POPULARITY DESC
    LIMIT 10
);

-- 10. What artist released the longest song?
SELECT
    ARTIST_NAME,
    TRACK_NAME,
    DURATION_MS
FROM
    BIT_DB.SPOTIFYDATA
GROUP BY
    ARTIST_NAME
ORDER BY
    DURATION_MS DESC
LIMIT 1;

-- 11. Calculate the average popularity for the artists in the Spotify data table. 
--Then, for every artist with an average popularity of 90 or above, show their name, their average popularity, and label them as a “Top Star”.
WITH
    AVG_POPULARITY_CTE AS (
        SELECT
            ARTIST_NAME,
            AVG(POPULARITY) AS AVG_POPULARITY
        FROM
            SPOTIFYDATA
        GROUP BY
            ARTIST_NAME)
SELECT
    ARTIST_NAME,
    AVG_POPULARITY,
    'Top Star' AS TAG
FROM
    AVG_POPULARITY_CTE
WHERE
    AVG_POPULARITY >= 90;

--Description of the data in each column:

--Popularity - The higher the value the more popular the song is
--Danceability - The higher the value, the easier it is to dance to this song
--Energy - The energy of a song - the higher the value, the more energtic. song
--Key - the key the track is in. Integers map to pitches using standard Pitch Class notation. E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1 (range: -1; 11)
--Loudness (dB) - The higher the value, the louder the song
--Mode - indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0
--Speechiness - The higher the value the more spoken word the song contains
--Acousticness - The higher the value the more acoustic the song is
--Instrumentalness - the number of vocals in a song. The closer the value to 1.0, the more instrumental the song is
--Liveness - The higher the value, the more likely the song is a live recording
--Valence - The higher the value, the more positive mood for the song
--Tempo - the overall estimated tempo of a track in beats per minute (BPM)
--Duration - duration of the song in ms
--Time signature - an estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of "3/4", to "7/4"
