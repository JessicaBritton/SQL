#In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data.

-- 1. How many many unique orders were placed in January? In other words, how many distinct order ids do we have?
SELECT
    COUNT(DISTINCT ORDERID) AS JAN_ORDERS
FROM
    BIT_DB.JANSALES
WHERE 
    LENGTH(ORDERID) = 6
AND 
    ORDERID <> 'Order ID';

-- 2. How many of those orders were for an iPhone?
SELECT
    COUNT(DISTINCT ORDERID) AS IPHONE_ORDERS
FROM
    BIT_DB.JANSALES
WHERE 
    PRODUCT = 'iPhone'
AND
    LENGTH(ORDERID) = 6
AND 
    ORDERID <> 'Order ID';

-- 3. Select the customer account numbers for all the orders that were placed in February. 
SELECT
    DISTINCT C.ACCTNUM,
    FEB.ORDERID
FROM
    BIT_DB.FEBSALES AS FEB
INNER JOIN
    BIT_DB.CUSTOMERS AS C
    ON FEB.ORDERID = C.ORDER_ID
WHERE 
    LENGTH(ORDERID) = 6
AND 
    ORDERID <> 'Order ID';

-- 4. Which product was the cheapest one sold in January, and what was the price?(I have two correct answers listed below.)
SELECT
    DISTINCT PRODUCT,
    MIN(PRICE) AS PRICE
FROM
    BIT_DB.JANSALES
GROUP BY
    PRODUCT,
    PRICE
ORDER BY
    PRICE ASC
LIMIT 1;

-- OR

SELECT 
  DISTINCT PRODUCT,
  PRICE
FROM
  BIT_DB.JanSales 
ORDER BY 
  price ASC 
LIMIT 1;

-- 5. What is the total revenue for each product sold in January? (Revenue can be calculated using the number of products sold and the price of the products).
SELECT
    DISTINCT PRODUCT,
    ROUND((SUM(QUANTITY) * PRICE), 2) AS TOTAL_REVENUE
FROM
    BIT_DB.JANSALES
GROUP BY PRODUCT
ORDER BY TOTAL_REVENUE DESC;

-- 6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
SELECT
    DISTINCT PRODUCT,
    SUM(QUANTITY),
    ROUND((SUM(QUANTITY) * PRICE), 2) AS TOTAL_REVENUE
FROM
    BIT_DB.FEBSALES
WHERE
    LOCATION = '548 Lincoln St, Seattle, WA 98101'
GROUP BY 
    PRODUCT;
    
-- 7. How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?
SELECT
    COUNT(DISTINCT C.ACCTNUM) AS NUMBER_OF_CUSTOMERS,
    ROUND(AVG(QUANTITY*PRICE), 2) as AVERAGE_AMOUNT_SPENT
FROM 
    BIT_DB.FEBSALES AS FEB
LEFT JOIN
    BIT_DB.CUSTOMERS C
    ON FEB.ORDERID = C.ORDER_ID
WHERE
    FEB.QUANTITY > 2
AND 
    LENGTH(ORDERID) = 6
AND 
    ORDERID <> 'Order ID';
  
-- 8. List all the products sold in Los Angeles in February, and include how many of each were sold.
SELECT 
    PRODUCT,
    SUM(quantity) AS QUANTITY_SOLD
FROM 
    BIT_DB.FEBSALES
WHERE 
    LOCATION LIKE '%Los Angeles%'
GROUP BY 
    PRODUCT;
    
-- 9. Which locations in New York received at least 3 orders in January, and how many orders did they each receive?
SELECT 
    DISTINCT LOCATION,
    COUNT(ORDERID) AS NUMBER_OF_ORDERS
FROM
    BIT_DB.JANSALES
WHERE
    LOCATION LIKE '%NY%'
AND 
    LENGTH(ORDERID) = 6
AND 
    ORDERID <> 'Order ID'
GROUP BY
    LOCATION
HAVING
    COUNT(ORDERID) >= 3;

-- 10. How many of each type of headphone were sold in February?
SELECT 
    PRODUCT,
    SUM(QUANTITY) AS QUANTITY_SOLD
FROM
    BIT_DB.FEBSALES
WHERE
    PRODUCT LIKE '%headphones%'
GROUP BY 
    PRODUCT;
    
-- 11. What was the average amount spent per account in February?
SELECT 
    ROUND(SUM(QUANTITY*PRICE)/COUNT(CUST.ACCTNUM), 2) AS AVG_AMOUNT_SPENT 
FROM
    BIT_DB.FEBSALES AS FEB
LEFT JOIN
    BIT_DB.CUSTOMERS AS CUST
    ON FEB.ORDERID = CUST.ORDER_ID
WHERE
    LENGTH(ORDERID) = 6
AND
    ORDERID <> 'Order ID';
    
-- 12. What was the average quantity of products purchased per account in February? 
SELECT
    SUM(QUANTITY)/COUNT(CUST.ACCTNUM) AS AVG_QUANTITY_PURCHASED
FROM
    BIT_DB.FEBSALES AS FEB
LEFT JOIN
    BIT_DB.CUSTOMERS AS CUST
    ON FEB.ORDERID = CUST.ORDER_ID
WHERE
    LENGTH(ORDERID) = 6
AND
    ORDERID <> 'Order ID';

-- 13. Which product brought in the most revenue in January and how much revenue did it bring in total? In other words, show the one product that generated the most revenue (revenue being equivalent to quantity of an item multiplied by the item’s price). 
SELECT
    PRODUCT,
    SUM(QUANTITY*PRICE) AS REVENUE
FROM
    BIT_DB.JANSALES
GROUP BY
    PRODUCT
ORDER BY
    REVENUE DESC
LIMIT 1;

-- 14. Find order ids from Georgia (GA) where the order has an average price greater than $1,000. Only find orders from dates beginning with ‘04/1’. Assume that the dates are stored in the MM/DD/YY HH:MM format.
SELECT
    ORDERID,
    AVG(PRICE) AS AVERAGE_PRICE,
    ORDERDATE
FROM
    BIT_DB.APRSALES
WHERE
    LOCATION LIKE '%GA%'
AND
    ORDERDATE LIKE '04/1%'
AND
    LENGTH(ORDERID) = 6
AND
    ORDERID <> 'Order ID'
GROUP BY
    ORDERID
HAVING
    AVG(PRICE) > 1000;
    
-- 15. You’ve been given the following results from the MaySales table. Can you reverse engineer a SQL query that returns these results? The result set will naturally only return 10 rows (i.e., you will not have to use LIMIT to get to 10 results).
--MaySales Results
--location	                                    orderID
--818 Wilson St, Los Angeles, CA 90001	         194305
--2 Center St, Austin, TX 73301	                 194315
--960 Park St, San Francisco, CA 94016	         194325
--53 Ridge St, Portland, OR 97035	             194335
--734 Hickory St, New York City, NY 10001        194345
--196 Cherry St, Portland, OR 97035	             194355
--924 13th St, Los Angeles, CA 90001	         194365
--602 Washington St, New York City, NY 10001     194375
--399 12th St, San Francisco, CA 94016	         194385
--434 Pine St, Seattle, WA 98101	             194395
SELECT
    LOCATION,
    ORDERID
FROM
    BIT_DB.MaySales
WHERE
    ORDERID LIKE '1943_5'
AND
    LENGTH(ORDERID) = 6
AND
    ORDERID <> 'Order ID'
GROUP BY
    ORDERID;
    
